package kr.ac.kopo.main;

import kr.ac.kopo.ui.BoardUI;

/*
 * MVC모델은
 * M: Model, 혹은 "자료", 를 담당하는 구역
 * V: View, 혹은 UI, 즉 보이는 부분을 담당하는 구역
 * C: Control, 즉 연산하는 부분을 담당하는 구역
 * 으로 나눠볼 수 있겠다.
 * 
 * 교수님께선 DAO로 자료(M)를 담당하는 구역과 UI로 뷰(V)를 담당하는 구역을 만들어주셨다.
 * 그리고 UI.execute()라는 우리가 마음대로 적을 수 있는 부분을 만들어 주셨다.
 * 하지만 마음대로 적을 수 있다고 이 부분에서 연산(C)을 하면 안된다.
 * 연산은 Control의 담당 구역이다.
 *
 * 
 * 따라서 연산부분을 담당하는 Ctrl(Control)를 새로 만들고,
 * 각 UI에 매칭되는 Ctrl을 연결시켜주는 시스템이 필요하다.
 * 
 * 개인적으로 추가하고 싶은 부분이 2가지가 있다.
 * 자동 추가 시스템과 분리된 스크립트이다.
 * 
 * 유니티나 고도에선 내가 따로 적지 않아도 거기에 클래스가 있으면
 * 알아서 감지해서 리스트에 추가해주는 시스템이 있다.
 * 자식 객체를 감지하고 해당하는 자식이 있는지 찾아주는 메서드이다.
 * 이건 현재로써 힘들어 보이지만,
 * 만약 누군가가 패키지 하나를 검사하고
 * 해당하는 클래스를 전부 객체화 시켜주는 기능을 미리 만들어뒀다면
 * 그 코드를 그대로 배껴와 쓰고싶다.
 * java.lang.reflect.getClasses
 * 
 * 분리된 스크립트는 번역할 때 모든 스크립트를 한 곳에서 볼 때 편하다고 한다.
 * 하나의 스크립트는 스크립트 코드, 스크립트, 변수 관련 스크립트로
 * 3개의 String으로 표현할 것이다.
 * 스크립트에 변수가 필요하면 변수를 중괄호로 묶어 표현할 것이고,
 * 변수 관련 스크립트는 "변수:값, 변수:값"의 형식으로 쓸 것이다.
 * 그리고 변수를 시스템에서 직접 구현해야할 경우,
 * $1, $2처럼 표현해서 이를 UI에서 설정할 수 있도록 만들것이다.
 */

public class BoardMain {
	public static void main(String[] args) {
		BoardUI ui = new BoardUI();
		
		try {
			ui.execute();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
